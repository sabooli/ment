'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var flowchart = _interopDefault(require('flowchart.js'));
var React = require('react');
var React__default = _interopDefault(React);

var CANVAS_ID = 'flowchartjs-canvas';
var ONCLICK_HANDLER_NAME = 'onClickHandler';
var NAME_FOR_MISSING_CONNECTION = 'none_missing_connection';

var outputNodes = function outputNodes(nodes) {
  var output = nodes.map(function (node) {
    var link = ':$' + ONCLICK_HANDLER_NAME;
    var flowstate = node.state ? "|" + node.state : '';
    return node.id + "=>" + node.type + ": " + node.label + flowstate + link;
  });
  return output.join('\n');
};

var writeConnection = function writeConnection(id, connection, key) {
  if (!connection) {
    return '';
  }

  var prefix = key ? key + ", " : '';
  return id + "(" + prefix + connection.position + ")->" + connection.id;
};

var outputConnections = function outputConnections(nodes) {
  var output = nodes.flatMap(function (node) {
    switch (node.type) {
      case 'start':
      case 'end':
      case 'operation':
      case 'inputoutput':
      case 'subroutine':
        return writeConnection(node.id, node.connection);

      case 'condition':
        {
          var yes = writeConnection(node.id, node.connections.yes, 'yes');
          var no = writeConnection(node.id, node.connections.no, 'no');
          return [yes, no];
        }

      case 'parallel':
        {
          var path1 = writeConnection(node.id, node.connections.path1, 'path1');
          var path2 = writeConnection(node.id, node.connections.path2, 'path2');
          var path3 = writeConnection(node.id, node.connections.path3, 'path3');
          return [path1, path2, path3];
        }

      default:
        return '';
    }
  }).filter(function (text) {
    return text !== '';
  });

  if (output.length <= 0 && nodes.length > 0) {
    output.push(writeConnection(nodes[0].id, {
      id: NAME_FOR_MISSING_CONNECTION,
      position: 'bottom'
    }));
  }

  return output.join('\n');
};

var chartElement = null;
var Flowchart = function Flowchart(props) {
  var nodes = props.nodes,
      config = props.config,
      styles = props.styles,
      states = props.states,
      onClick = props.onClick;

  var internalClickHandler = function internalClickHandler(mouseEvent, item) {
    if (onClick) {
      onClick(item, mouseEvent);
    }
  };

  window[ONCLICK_HANDLER_NAME] = internalClickHandler;
  React.useEffect(function () {
    if (nodes.length <= 0) {
      return;
    }

    if (chartElement && chartElement.clean) {
      chartElement.clean();
    }

    var nodesCode = outputNodes(nodes);
    var connectionsCode = outputConnections(nodes);
    chartElement = flowchart.parse("\n      " + nodesCode + "\n      " + connectionsCode + "\n    ");
    chartElement.drawSVG(CANVAS_ID, {
      'line-width': (config === null || config === void 0 ? void 0 : config.lineWidth) || 2,
      'line-length': (config === null || config === void 0 ? void 0 : config.lineLength) || 50,
      'text-margin': (config === null || config === void 0 ? void 0 : config.textMargin) || 10,
      'font-size': (config === null || config === void 0 ? void 0 : config.fontSize) || 14,
      'font-family': (config === null || config === void 0 ? void 0 : config.fontFamily) || 'Helvetica',
      'font-weight': (config === null || config === void 0 ? void 0 : config.fontWeight) || 'normal',
      'font-color': (config === null || config === void 0 ? void 0 : config.fontColor) || 'black',
      'line-color': (config === null || config === void 0 ? void 0 : config.lineColor) || 'black',
      'element-color': (config === null || config === void 0 ? void 0 : config.elementColor) || 'black',
      fill: (config === null || config === void 0 ? void 0 : config.fill) || 'white',
      'yes-text': (config === null || config === void 0 ? void 0 : config.yesText) || 'yes',
      'no-text': (config === null || config === void 0 ? void 0 : config.noText) || 'no',
      'arrow-end': (config === null || config === void 0 ? void 0 : config.arrowEnd) || 'classic-wide-long',
      scale: (config === null || config === void 0 ? void 0 : config.scale) || 1,
      // nodes style
      symbols: styles,
      // flowstate styles
      flowstate: states
    });
  }, [nodes, config, styles, states]);
  return React__default.createElement("div", {
    id: CANVAS_ID
  });
};

exports.Flowchart = Flowchart;
//# sourceMappingURL=react-flowchart.js.cjs.development.js.map
