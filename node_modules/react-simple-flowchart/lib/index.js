'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _flowchart = require('flowchart.js');

var _flowchart2 = _interopRequireDefault(_flowchart);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Flowchart = function (_Component) {
  _inherits(Flowchart, _Component);

  function Flowchart() {
    _classCallCheck(this, Flowchart);

    return _possibleConstructorReturn(this, (Flowchart.__proto__ || Object.getPrototypeOf(Flowchart)).apply(this, arguments));
  }

  _createClass(Flowchart, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          chartCode = _props.chartCode,
          options = _props.options;

      var flow = _flowchart2.default.parse(chartCode);

      if (this.chart) {
        flow.drawSVG(this.chart, options);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _props2 = this.props,
          chartCode = _props2.chartCode,
          options = _props2.options;

      var flowNew = _flowchart2.default.parse(chartCode);

      if (this.chart) {
        this.chart.removeChild(this.chart.children[0]);
        flowNew.drawSVG(this.chart, options);
      }
    }
  }, {
    key: 'handleClick',
    value: function handleClick(e) {
      if (e.target.tagName === 'tspan') {
        this.props.onClick(e.target.innerHTML);
      }
      if (e.target.tagName === 'rect' || e.target.tagName === 'path') {
        this.props.onClick(e.target.id);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement('div', { ref: function ref(div) {
          return _this2.chart = div;
        }, onClick: function onClick(e) {
          return _this2.handleClick(e);
        } });
    }
  }]);

  return Flowchart;
}(_react.Component);

Flowchart.propTypes = {
  chartCode: _propTypes2.default.string.isRequired,
  options: _propTypes2.default.object.isRequired,
  onClick: _propTypes2.default.func
};
Flowchart.defaultProps = {
  onClick: function onClick() {
    return null;
  }
};
exports.default = Flowchart;