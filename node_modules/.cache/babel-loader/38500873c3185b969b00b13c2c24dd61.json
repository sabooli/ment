{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\SABA\\\\Desktop\\\\mentallandreact-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { getDocument } from 'ssr-window';\nimport { createElement, elementChildren, setCSSProperty } from '../../shared/utils.js';\nexport default function Virtual(_ref) {\n  var swiper = _ref.swiper,\n    extendParams = _ref.extendParams,\n    on = _ref.on,\n    emit = _ref.emit;\n  extendParams({\n    virtual: {\n      enabled: false,\n      slides: [],\n      cache: true,\n      renderSlide: null,\n      renderExternal: null,\n      renderExternalUpdate: true,\n      addSlidesBefore: 0,\n      addSlidesAfter: 0\n    }\n  });\n  var cssModeTimeout;\n  var document = getDocument();\n  swiper.virtual = {\n    cache: {},\n    from: undefined,\n    to: undefined,\n    slides: [],\n    offset: 0,\n    slidesGrid: []\n  };\n  var tempDOM = document.createElement('div');\n  function renderSlide(slide, index) {\n    var params = swiper.params.virtual;\n    if (params.cache && swiper.virtual.cache[index]) {\n      return swiper.virtual.cache[index];\n    }\n    // eslint-disable-next-line\n    var slideEl;\n    if (params.renderSlide) {\n      slideEl = params.renderSlide.call(swiper, slide, index);\n      if (typeof slideEl === 'string') {\n        tempDOM.innerHTML = slideEl;\n        slideEl = tempDOM.children[0];\n      }\n    } else if (swiper.isElement) {\n      slideEl = createElement('swiper-slide');\n    } else {\n      slideEl = createElement('div', swiper.params.slideClass);\n    }\n    slideEl.setAttribute('data-swiper-slide-index', index);\n    if (!params.renderSlide) {\n      slideEl.innerHTML = slide;\n    }\n    if (params.cache) swiper.virtual.cache[index] = slideEl;\n    return slideEl;\n  }\n  function update(force) {\n    var _swiper$params = swiper.params,\n      slidesPerView = _swiper$params.slidesPerView,\n      slidesPerGroup = _swiper$params.slidesPerGroup,\n      centeredSlides = _swiper$params.centeredSlides,\n      isLoop = _swiper$params.loop;\n    var _swiper$params$virtua = swiper.params.virtual,\n      addSlidesBefore = _swiper$params$virtua.addSlidesBefore,\n      addSlidesAfter = _swiper$params$virtua.addSlidesAfter;\n    var _swiper$virtual = swiper.virtual,\n      previousFrom = _swiper$virtual.from,\n      previousTo = _swiper$virtual.to,\n      slides = _swiper$virtual.slides,\n      previousSlidesGrid = _swiper$virtual.slidesGrid,\n      previousOffset = _swiper$virtual.offset;\n    if (!swiper.params.cssMode) {\n      swiper.updateActiveIndex();\n    }\n    var activeIndex = swiper.activeIndex || 0;\n    var offsetProp;\n    if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';\n    var slidesAfter;\n    var slidesBefore;\n    if (centeredSlides) {\n      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n    } else {\n      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\n      slidesBefore = (isLoop ? slidesPerView : slidesPerGroup) + addSlidesBefore;\n    }\n    var from = activeIndex - slidesBefore;\n    var to = activeIndex + slidesAfter;\n    if (!isLoop) {\n      from = Math.max(from, 0);\n      to = Math.min(to, slides.length - 1);\n    }\n    var offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n    if (isLoop && activeIndex >= slidesBefore) {\n      from -= slidesBefore;\n      if (!centeredSlides) offset += swiper.slidesGrid[0];\n    } else if (isLoop && activeIndex < slidesBefore) {\n      from = -slidesBefore;\n      if (centeredSlides) offset += swiper.slidesGrid[0];\n    }\n    Object.assign(swiper.virtual, {\n      from: from,\n      to: to,\n      offset: offset,\n      slidesGrid: swiper.slidesGrid,\n      slidesBefore: slidesBefore,\n      slidesAfter: slidesAfter\n    });\n    function onRendered() {\n      swiper.updateSlides();\n      swiper.updateProgress();\n      swiper.updateSlidesClasses();\n      emit('virtualUpdate');\n    }\n    if (previousFrom === from && previousTo === to && !force) {\n      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\n        swiper.slides.forEach(function (slideEl) {\n          slideEl.style[offsetProp] = \"\".concat(offset - Math.abs(swiper.cssOverflowAdjustment()), \"px\");\n        });\n      }\n      swiper.updateProgress();\n      emit('virtualUpdate');\n      return;\n    }\n    if (swiper.params.virtual.renderExternal) {\n      swiper.params.virtual.renderExternal.call(swiper, {\n        offset: offset,\n        from: from,\n        to: to,\n        slides: function getSlides() {\n          var slidesToRender = [];\n          for (var i = from; i <= to; i += 1) {\n            slidesToRender.push(slides[i]);\n          }\n          return slidesToRender;\n        }()\n      });\n      if (swiper.params.virtual.renderExternalUpdate) {\n        onRendered();\n      } else {\n        emit('virtualUpdate');\n      }\n      return;\n    }\n    var prependIndexes = [];\n    var appendIndexes = [];\n    var getSlideIndex = function getSlideIndex(index) {\n      var slideIndex = index;\n      if (index < 0) {\n        slideIndex = slides.length + index;\n      } else if (slideIndex >= slides.length) {\n        // eslint-disable-next-line\n        slideIndex = slideIndex - slides.length;\n      }\n      return slideIndex;\n    };\n    if (force) {\n      swiper.slidesEl.querySelectorAll(\".\".concat(swiper.params.slideClass, \", swiper-slide\")).forEach(function (slideEl) {\n        slideEl.remove();\n      });\n    } else {\n      for (var i = previousFrom; i <= previousTo; i += 1) {\n        if (i < from || i > to) {\n          var slideIndex = getSlideIndex(i);\n          swiper.slidesEl.querySelectorAll(\".\".concat(swiper.params.slideClass, \"[data-swiper-slide-index=\\\"\").concat(slideIndex, \"\\\"], swiper-slide[data-swiper-slide-index=\\\"\").concat(slideIndex, \"\\\"]\")).forEach(function (slideEl) {\n            slideEl.remove();\n          });\n        }\n      }\n    }\n    var loopFrom = isLoop ? -slides.length : 0;\n    var loopTo = isLoop ? slides.length * 2 : slides.length;\n    for (var _i = loopFrom; _i < loopTo; _i += 1) {\n      if (_i >= from && _i <= to) {\n        var _slideIndex = getSlideIndex(_i);\n        if (typeof previousTo === 'undefined' || force) {\n          appendIndexes.push(_slideIndex);\n        } else {\n          if (_i > previousTo) appendIndexes.push(_slideIndex);\n          if (_i < previousFrom) prependIndexes.push(_slideIndex);\n        }\n      }\n    }\n    appendIndexes.forEach(function (index) {\n      swiper.slidesEl.append(renderSlide(slides[index], index));\n    });\n    if (isLoop) {\n      for (var _i2 = prependIndexes.length - 1; _i2 >= 0; _i2 -= 1) {\n        var index = prependIndexes[_i2];\n        swiper.slidesEl.prepend(renderSlide(slides[index], index));\n      }\n    } else {\n      prependIndexes.sort(function (a, b) {\n        return b - a;\n      });\n      prependIndexes.forEach(function (index) {\n        swiper.slidesEl.prepend(renderSlide(slides[index], index));\n      });\n    }\n    elementChildren(swiper.slidesEl, '.swiper-slide, swiper-slide').forEach(function (slideEl) {\n      slideEl.style[offsetProp] = \"\".concat(offset - Math.abs(swiper.cssOverflowAdjustment()), \"px\");\n    });\n    onRendered();\n  }\n  function appendSlide(slides) {\n    if (typeof slides === 'object' && 'length' in slides) {\n      for (var i = 0; i < slides.length; i += 1) {\n        if (slides[i]) swiper.virtual.slides.push(slides[i]);\n      }\n    } else {\n      swiper.virtual.slides.push(slides);\n    }\n    update(true);\n  }\n  function prependSlide(slides) {\n    var activeIndex = swiper.activeIndex;\n    var newActiveIndex = activeIndex + 1;\n    var numberOfNewSlides = 1;\n    if (Array.isArray(slides)) {\n      for (var i = 0; i < slides.length; i += 1) {\n        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\n      }\n      newActiveIndex = activeIndex + slides.length;\n      numberOfNewSlides = slides.length;\n    } else {\n      swiper.virtual.slides.unshift(slides);\n    }\n    if (swiper.params.virtual.cache) {\n      var cache = swiper.virtual.cache;\n      var newCache = {};\n      Object.keys(cache).forEach(function (cachedIndex) {\n        var cachedEl = cache[cachedIndex];\n        var cachedElIndex = cachedEl.getAttribute('data-swiper-slide-index');\n        if (cachedElIndex) {\n          cachedEl.setAttribute('data-swiper-slide-index', parseInt(cachedElIndex, 10) + numberOfNewSlides);\n        }\n        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cachedEl;\n      });\n      swiper.virtual.cache = newCache;\n    }\n    update(true);\n    swiper.slideTo(newActiveIndex, 0);\n  }\n  function removeSlide(slidesIndexes) {\n    if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;\n    var activeIndex = swiper.activeIndex;\n    if (Array.isArray(slidesIndexes)) {\n      for (var i = slidesIndexes.length - 1; i >= 0; i -= 1) {\n        swiper.virtual.slides.splice(slidesIndexes[i], 1);\n        if (swiper.params.virtual.cache) {\n          delete swiper.virtual.cache[slidesIndexes[i]];\n        }\n        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\n        activeIndex = Math.max(activeIndex, 0);\n      }\n    } else {\n      swiper.virtual.slides.splice(slidesIndexes, 1);\n      if (swiper.params.virtual.cache) {\n        delete swiper.virtual.cache[slidesIndexes];\n      }\n      if (slidesIndexes < activeIndex) activeIndex -= 1;\n      activeIndex = Math.max(activeIndex, 0);\n    }\n    update(true);\n    swiper.slideTo(activeIndex, 0);\n  }\n  function removeAllSlides() {\n    swiper.virtual.slides = [];\n    if (swiper.params.virtual.cache) {\n      swiper.virtual.cache = {};\n    }\n    update(true);\n    swiper.slideTo(0, 0);\n  }\n  on('beforeInit', function () {\n    if (!swiper.params.virtual.enabled) return;\n    var domSlidesAssigned;\n    if (typeof swiper.passedParams.virtual.slides === 'undefined') {\n      var slides = _toConsumableArray(swiper.slidesEl.children).filter(function (el) {\n        return el.matches(\".\".concat(swiper.params.slideClass, \", swiper-slide\"));\n      });\n      if (slides && slides.length) {\n        swiper.virtual.slides = _toConsumableArray(slides);\n        domSlidesAssigned = true;\n        slides.forEach(function (slideEl, slideIndex) {\n          slideEl.setAttribute('data-swiper-slide-index', slideIndex);\n          swiper.virtual.cache[slideIndex] = slideEl;\n          slideEl.remove();\n        });\n      }\n    }\n    if (!domSlidesAssigned) {\n      swiper.virtual.slides = swiper.params.virtual.slides;\n    }\n    swiper.classNames.push(\"\".concat(swiper.params.containerModifierClass, \"virtual\"));\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n    if (!swiper.params.initialSlide) {\n      update();\n    }\n  });\n  on('setTranslate', function () {\n    if (!swiper.params.virtual.enabled) return;\n    if (swiper.params.cssMode && !swiper._immediateVirtual) {\n      clearTimeout(cssModeTimeout);\n      cssModeTimeout = setTimeout(function () {\n        update();\n      }, 100);\n    } else {\n      update();\n    }\n  });\n  on('init update resize', function () {\n    if (!swiper.params.virtual.enabled) return;\n    if (swiper.params.cssMode) {\n      setCSSProperty(swiper.wrapperEl, '--swiper-virtual-size', \"\".concat(swiper.virtualSize, \"px\"));\n    }\n  });\n  Object.assign(swiper.virtual, {\n    appendSlide: appendSlide,\n    prependSlide: prependSlide,\n    removeSlide: removeSlide,\n    removeAllSlides: removeAllSlides,\n    update: update\n  });\n}","map":null,"metadata":{},"sourceType":"module"}