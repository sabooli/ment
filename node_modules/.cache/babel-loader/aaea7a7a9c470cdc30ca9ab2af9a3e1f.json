{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\SABA\\\\Desktop\\\\mentallandreact-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport createElementIfNotDefined from '../../shared/create-element-if-not-defined.js';\nexport default function Navigation(_ref) {\n  var swiper = _ref.swiper,\n    extendParams = _ref.extendParams,\n    on = _ref.on,\n    emit = _ref.emit;\n  extendParams({\n    navigation: {\n      nextEl: null,\n      prevEl: null,\n      hideOnClick: false,\n      disabledClass: 'swiper-button-disabled',\n      hiddenClass: 'swiper-button-hidden',\n      lockClass: 'swiper-button-lock',\n      navigationDisabledClass: 'swiper-navigation-disabled'\n    }\n  });\n  swiper.navigation = {\n    nextEl: null,\n    prevEl: null\n  };\n  var makeElementsArray = function makeElementsArray(el) {\n    if (!Array.isArray(el)) el = [el].filter(function (e) {\n      return !!e;\n    });\n    return el;\n  };\n  function getEl(el) {\n    var res;\n    if (el && typeof el === 'string' && swiper.isElement) {\n      res = swiper.el.shadowRoot.querySelector(el);\n      if (res) return res;\n    }\n    if (el) {\n      if (typeof el === 'string') res = _toConsumableArray(document.querySelectorAll(el));\n      if (swiper.params.uniqueNavElements && typeof el === 'string' && res.length > 1 && swiper.el.querySelectorAll(el).length === 1) {\n        res = swiper.el.querySelector(el);\n      }\n    }\n    if (el && !res) return el;\n    // if (Array.isArray(res) && res.length === 1) res = res[0];\n    return res;\n  }\n  function toggleEl(el, disabled) {\n    var params = swiper.params.navigation;\n    el = makeElementsArray(el);\n    el.forEach(function (subEl) {\n      if (subEl) {\n        var _subEl$classList;\n        (_subEl$classList = subEl.classList)[disabled ? 'add' : 'remove'].apply(_subEl$classList, _toConsumableArray(params.disabledClass.split(' ')));\n        if (subEl.tagName === 'BUTTON') subEl.disabled = disabled;\n        if (swiper.params.watchOverflow && swiper.enabled) {\n          subEl.classList[swiper.isLocked ? 'add' : 'remove'](params.lockClass);\n        }\n      }\n    });\n  }\n  function update() {\n    // Update Navigation Buttons\n    var _swiper$navigation = swiper.navigation,\n      nextEl = _swiper$navigation.nextEl,\n      prevEl = _swiper$navigation.prevEl;\n    if (swiper.params.loop) {\n      toggleEl(prevEl, false);\n      toggleEl(nextEl, false);\n      return;\n    }\n    toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);\n    toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);\n  }\n  function onPrevClick(e) {\n    e.preventDefault();\n    if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;\n    swiper.slidePrev();\n    emit('navigationPrev');\n  }\n  function onNextClick(e) {\n    e.preventDefault();\n    if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;\n    swiper.slideNext();\n    emit('navigationNext');\n  }\n  function init() {\n    var params = swiper.params.navigation;\n    swiper.params.navigation = createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n      nextEl: 'swiper-button-next',\n      prevEl: 'swiper-button-prev'\n    });\n    if (!(params.nextEl || params.prevEl)) return;\n    var nextEl = getEl(params.nextEl);\n    var prevEl = getEl(params.prevEl);\n    Object.assign(swiper.navigation, {\n      nextEl: nextEl,\n      prevEl: prevEl\n    });\n    nextEl = makeElementsArray(nextEl);\n    prevEl = makeElementsArray(prevEl);\n    var initButton = function initButton(el, dir) {\n      if (el) {\n        el.addEventListener('click', dir === 'next' ? onNextClick : onPrevClick);\n      }\n      if (!swiper.enabled && el) {\n        var _el$classList;\n        (_el$classList = el.classList).add.apply(_el$classList, _toConsumableArray(params.lockClass.split(' ')));\n      }\n    };\n    nextEl.forEach(function (el) {\n      return initButton(el, 'next');\n    });\n    prevEl.forEach(function (el) {\n      return initButton(el, 'prev');\n    });\n  }\n  function destroy() {\n    var _swiper$navigation2 = swiper.navigation,\n      nextEl = _swiper$navigation2.nextEl,\n      prevEl = _swiper$navigation2.prevEl;\n    nextEl = makeElementsArray(nextEl);\n    prevEl = makeElementsArray(prevEl);\n    var destroyButton = function destroyButton(el, dir) {\n      var _el$classList2;\n      el.removeEventListener('click', dir === 'next' ? onNextClick : onPrevClick);\n      (_el$classList2 = el.classList).remove.apply(_el$classList2, _toConsumableArray(swiper.params.navigation.disabledClass.split(' ')));\n    };\n    nextEl.forEach(function (el) {\n      return destroyButton(el, 'next');\n    });\n    prevEl.forEach(function (el) {\n      return destroyButton(el, 'prev');\n    });\n  }\n  on('init', function () {\n    if (swiper.params.navigation.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      update();\n    }\n  });\n  on('toEdge fromEdge lock unlock', function () {\n    update();\n  });\n  on('destroy', function () {\n    destroy();\n  });\n  on('enable disable', function () {\n    var _swiper$navigation3 = swiper.navigation,\n      nextEl = _swiper$navigation3.nextEl,\n      prevEl = _swiper$navigation3.prevEl;\n    nextEl = makeElementsArray(nextEl);\n    prevEl = makeElementsArray(prevEl);\n    [].concat(_toConsumableArray(nextEl), _toConsumableArray(prevEl)).filter(function (el) {\n      return !!el;\n    }).forEach(function (el) {\n      return el.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.navigation.lockClass);\n    });\n  });\n  on('click', function (_s, e) {\n    var _swiper$navigation4 = swiper.navigation,\n      nextEl = _swiper$navigation4.nextEl,\n      prevEl = _swiper$navigation4.prevEl;\n    nextEl = makeElementsArray(nextEl);\n    prevEl = makeElementsArray(prevEl);\n    var targetEl = e.target;\n    if (swiper.params.navigation.hideOnClick && !prevEl.includes(targetEl) && !nextEl.includes(targetEl)) {\n      if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\n      var isHidden;\n      if (nextEl.length) {\n        isHidden = nextEl[0].classList.contains(swiper.params.navigation.hiddenClass);\n      } else if (prevEl.length) {\n        isHidden = prevEl[0].classList.contains(swiper.params.navigation.hiddenClass);\n      }\n      if (isHidden === true) {\n        emit('navigationShow');\n      } else {\n        emit('navigationHide');\n      }\n      [].concat(_toConsumableArray(nextEl), _toConsumableArray(prevEl)).filter(function (el) {\n        return !!el;\n      }).forEach(function (el) {\n        return el.classList.toggle(swiper.params.navigation.hiddenClass);\n      });\n    }\n  });\n  var enable = function enable() {\n    var _swiper$el$classList;\n    (_swiper$el$classList = swiper.el.classList).remove.apply(_swiper$el$classList, _toConsumableArray(swiper.params.navigation.navigationDisabledClass.split(' ')));\n    init();\n    update();\n  };\n  var disable = function disable() {\n    var _swiper$el$classList2;\n    (_swiper$el$classList2 = swiper.el.classList).add.apply(_swiper$el$classList2, _toConsumableArray(swiper.params.navigation.navigationDisabledClass.split(' ')));\n    destroy();\n  };\n  Object.assign(swiper.navigation, {\n    enable: enable,\n    disable: disable,\n    update: update,\n    init: init,\n    destroy: destroy\n  });\n}","map":null,"metadata":{},"sourceType":"module"}