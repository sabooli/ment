{"ast":null,"code":"export default function loopFix() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    slideRealIndex = _ref.slideRealIndex,\n    _ref$slideTo = _ref.slideTo,\n    slideTo = _ref$slideTo === void 0 ? true : _ref$slideTo,\n    direction = _ref.direction,\n    setTranslate = _ref.setTranslate,\n    activeSlideIndex = _ref.activeSlideIndex,\n    byController = _ref.byController,\n    byMousewheel = _ref.byMousewheel;\n  var swiper = this;\n  if (!swiper.params.loop) return;\n  swiper.emit('beforeLoopFix');\n  var slides = swiper.slides,\n    allowSlidePrev = swiper.allowSlidePrev,\n    allowSlideNext = swiper.allowSlideNext,\n    slidesEl = swiper.slidesEl,\n    params = swiper.params;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  if (swiper.virtual && params.virtual.enabled) {\n    if (slideTo) {\n      if (!params.centeredSlides && swiper.snapIndex === 0) {\n        swiper.slideTo(swiper.virtual.slides.length, 0, false, true);\n      } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {\n        swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);\n      } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {\n        swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);\n      }\n    }\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    swiper.emit('loopFix');\n    return;\n  }\n  var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10));\n  var loopedSlides = params.loopedSlides || slidesPerView;\n  if (loopedSlides % params.slidesPerGroup !== 0) {\n    loopedSlides += params.slidesPerGroup - loopedSlides % params.slidesPerGroup;\n  }\n  swiper.loopedSlides = loopedSlides;\n  var prependSlidesIndexes = [];\n  var appendSlidesIndexes = [];\n  var activeIndex = swiper.activeIndex;\n  if (typeof activeSlideIndex === 'undefined') {\n    activeSlideIndex = swiper.getSlideIndex(swiper.slides.filter(function (el) {\n      return el.classList.contains(params.slideActiveClass);\n    })[0]);\n  } else {\n    activeIndex = activeSlideIndex;\n  }\n  var isNext = direction === 'next' || !direction;\n  var isPrev = direction === 'prev' || !direction;\n  var slidesPrepended = 0;\n  var slidesAppended = 0;\n  // prepend last slides before start\n  if (activeSlideIndex < loopedSlides) {\n    slidesPrepended = Math.max(loopedSlides - activeSlideIndex, params.slidesPerGroup);\n    for (var i = 0; i < loopedSlides - activeSlideIndex; i += 1) {\n      var index = i - Math.floor(i / slides.length) * slides.length;\n      prependSlidesIndexes.push(slides.length - index - 1);\n    }\n  } else if (activeSlideIndex /* + slidesPerView */ > swiper.slides.length - loopedSlides * 2) {\n    slidesAppended = Math.max(activeSlideIndex - (swiper.slides.length - loopedSlides * 2), params.slidesPerGroup);\n    for (var _i = 0; _i < slidesAppended; _i += 1) {\n      var _index = _i - Math.floor(_i / slides.length) * slides.length;\n      appendSlidesIndexes.push(_index);\n    }\n  }\n  if (isPrev) {\n    prependSlidesIndexes.forEach(function (index) {\n      swiper.slides[index].swiperLoopMoveDOM = true;\n      slidesEl.prepend(swiper.slides[index]);\n      swiper.slides[index].swiperLoopMoveDOM = false;\n    });\n  }\n  if (isNext) {\n    appendSlidesIndexes.forEach(function (index) {\n      swiper.slides[index].swiperLoopMoveDOM = true;\n      slidesEl.append(swiper.slides[index]);\n      swiper.slides[index].swiperLoopMoveDOM = false;\n    });\n  }\n  swiper.recalcSlides();\n  if (params.slidesPerView === 'auto') {\n    swiper.updateSlides();\n  }\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n  if (slideTo) {\n    if (prependSlidesIndexes.length > 0 && isPrev) {\n      if (typeof slideRealIndex === 'undefined') {\n        var currentSlideTranslate = swiper.slidesGrid[activeIndex];\n        var newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];\n        var diff = newSlideTranslate - currentSlideTranslate;\n        if (byMousewheel) {\n          swiper.setTranslate(swiper.translate - diff);\n        } else {\n          swiper.slideTo(activeIndex + slidesPrepended, 0, false, true);\n          if (setTranslate) {\n            swiper.touches[swiper.isHorizontal() ? 'startX' : 'startY'] += diff;\n          }\n        }\n      } else {\n        if (setTranslate) {\n          swiper.slideToLoop(slideRealIndex, 0, false, true);\n        }\n      }\n    } else if (appendSlidesIndexes.length > 0 && isNext) {\n      if (typeof slideRealIndex === 'undefined') {\n        var _currentSlideTranslate = swiper.slidesGrid[activeIndex];\n        var _newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];\n        var _diff = _newSlideTranslate - _currentSlideTranslate;\n        if (byMousewheel) {\n          swiper.setTranslate(swiper.translate - _diff);\n        } else {\n          swiper.slideTo(activeIndex - slidesAppended, 0, false, true);\n          if (setTranslate) {\n            swiper.touches[swiper.isHorizontal() ? 'startX' : 'startY'] += _diff;\n          }\n        }\n      } else {\n        swiper.slideToLoop(slideRealIndex, 0, false, true);\n      }\n    }\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  if (swiper.controller && swiper.controller.control && !byController) {\n    var loopParams = {\n      slideRealIndex: slideRealIndex,\n      slideTo: false,\n      direction: direction,\n      setTranslate: setTranslate,\n      activeSlideIndex: activeSlideIndex,\n      byController: true\n    };\n    if (Array.isArray(swiper.controller.control)) {\n      swiper.controller.control.forEach(function (c) {\n        if (!c.destroyed && c.params.loop) c.loopFix(loopParams);\n      });\n    } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {\n      swiper.controller.control.loopFix(loopParams);\n    }\n  }\n  swiper.emit('loopFix');\n}","map":null,"metadata":{},"sourceType":"module"}